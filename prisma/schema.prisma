// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node -r tsconfig-paths/register prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            BigInt    @id @default(autoincrement())
  email         String    @unique
  passwordHash  String
  username      String    @unique
  firstName     String
  lastName      String
  gender        String  //can only be male or female
  isActive      Boolean   @default(false)
  otpEnabled    Boolean   @default(false)
  otpSecret     String?
  lastLoginAt   DateTime?
  phoneNumber   String?   @unique
  userType      UserType?  @default(USER)
  profileImage  String?
  emailVerified Boolean   @default(false)
  isFirstLogin  Boolean   @default(false)
  dateOfBirth   DateTime?
  parishId      Int?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  roles         UserRole[]
  otps          Otp[]
  refreshTokens RefreshToken[]
  passwordResets PasswordReset[]
  files         File[]

  Parish Parish[]
}

model Role {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique
  description String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique
  description String
  resource    String
  action      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles       RolePermission[]
}

model UserRole {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    BigInt
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       BigInt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId BigInt
  createdAt    DateTime   @default(now())

  @@id([roleId, permissionId])
}

model Otp {
  id         BigInt    @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  secret     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
}

model RefreshToken {
  id        BigInt    @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model EmailVerification {
  id         BigInt    @id @default(autoincrement())
  email      String
  code       String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())

  @@index([email])
}

model PasswordReset {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt
  email     String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
}

model File {
  id          BigInt    @id @default(autoincrement())
  filename    String
  originalName String
  path        String
  mimeType    String
  size        Int
  bucket      String
  userId      BigInt?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}


model Diocese {
  id             Int      @id @default(autoincrement())
  name           String   @unique()
  profile        String
  cathedral      String?
  address        String?
  telephones     String?
  emails         String?
  province       String?
  bishop         String?
  isArchidiocese Boolean  @default(false)
  countryId      Int
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      Int?
  updatedBy     Int?

  denaries   Denary[]
  programmes Programme[]
  country    Country? @relation(fields: [countryId], references: [id])


  DioceseSociety DioceseSociety[]

  event event[]
}


model Denary {
  id        Int      @id @default(autoincrement())
  name      String
  dean      String
  address   String
  dioceseId Int
  profile   String
  active    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      Int?
  updatedBy     Int?

  diocese   Diocese?    @relation(fields: [dioceseId], references: [id], onDelete: Restrict)
  parishes  Parish[]
  programme Programme[]

  event event[]
}

model Parish {
  id                Int       @id @default(autoincrement())
  name              String
  profile           String?
  email             String?
  telephone         String?
  slogan            String?
  address           String
  town              String
  lga               String?
  state             String
  postOfficeAddress String?
  website           String?
  logo              String?
  vision            String?
  mission           String?
  establishedOn     DateTime?
  active            Boolean   @default(true)
  isStation         Boolean   @default(false)
  parentParishId    Int?
  denaryId          Int?

  //optimise on a table
  parishPriest     String?
  assistantPriest1 String?
  assistantPriest2 String?

  parishPriestPhoneNumber     String?
  assistantPriest1PhoneNumber String?
  assistantPriest2PhoneNumber String?

  createdAt DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      Int?
  updatedBy     Int?

  denary          Denary?         @relation(fields: [denaryId], references: [id], onDelete: Restrict)
  users           User[]
  dioceseSocieties DioceseSociety[]
  programmes      Programme[]
  searchLogs      SearchLog[]

  event event[]
}

model Society {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  shortName   String?  @unique
  description String
  active      Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      Int?
  updatedBy     Int?

  DioceseSociety DioceseSociety[]
  event event[]
}

model DioceseSociety {
  id          Int      @id @default(autoincrement())
  dioceseId   Int
  societyId   Int
  description String
  active      Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      Int?
  updatedBy     Int?

  diocese    Diocese?      @relation(fields: [dioceseId], references: [id], onDelete: Restrict)
  society    Society?     @relation(fields: [societyId], references: [id], onDelete: Restrict)

  @@unique([dioceseId, societyId])
  Parish Parish[]
}

model Programme {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  hint          String?
  active        Boolean  @default(true)
  programmeType String
  isGeneral     Boolean  @default(false)
  venue         String            @default("Church Premise")
  startTime     DateTime?
  endTime       DateTime?
  frequency     ProgrammeFrequency
  frequencyInfo String?

  parishId      Int?
  denaryId      Int?
  dioceseId     Int?
  societyId     Int?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      Int?
  updatedBy     Int?

// relationships
  parish         Parish?         @relation(fields: [parishId], references: [id])
  denary         Denary?         @relation(fields: [denaryId], references: [id])
  diocese        Diocese?        @relation(fields: [dioceseId], references: [id])
}

model event {
  id          Int      @id @default(autoincrement())
  name        String   
  description String
  startDate   DateTime
  endDate     DateTime
  location    String?
  isPublic    Boolean? @default(false)
  parishId    Int?
  denaryId    Int?
  dioceseId   Int?
  societyId   Int?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      Int?
  updatedBy     Int?  

  parish         Parish?         @relation(fields: [parishId], references: [id])
  denary         Denary?         @relation(fields: [denaryId], references: [id])
  diocese        Diocese?        @relation(fields: [dioceseId], references: [id])
  society        Society?        @relation(fields: [societyId], references: [id])
  //users         User[]          @relation("EventUsers", fields: [id], references: [id], onDelete: Cascade)  
  //participants  User[]          @relation("EventParticipants", fields: [id], references: [id], onDelete: Cascade)

  @@index([ name])
  @@index([ description])
  @@index([ location])
  @@index([ startDate, endDate])
}

model SearchLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  searchText String
  searchDate DateTime @default(now())
  parishId   Int?

  parish Parish? @relation(fields: [parishId], references: [id])
}


model Country {
  id        Int     @id @default(autoincrement())
  name      String   @unique()
  code2     String?
  code3     String?
  capital   String?
  region    String?
  subregion String?

  states State[]
  diocee Diocese[]
}

model State {
  id        Int    @id @default(autoincrement())
  name      String 
  countryId Int

  country Country? @relation(fields: [countryId], references: [id])
  lgas    Lga[]

  @@unique([name, countryId])
}

model Lga {
  id      Int    @id @default(autoincrement())
  name    String 
  stateId Int

  state State @relation(fields: [stateId], references: [id])

  @@unique([name, stateId])
}

enum UserType {
  USER
  BACKOFFICE
  SUPERHERO
}


enum ProgrammeFrequency {
  YEARLY
  BIMONTHLY
  MONTHLY
  WEEKLY
  QUARTERLY
  DAILY
  ONCE
  OTHERS
}